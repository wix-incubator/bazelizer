package tools.jvm.mvn;


import com.google.common.collect.AbstractIterator;
import com.google.common.collect.Iterables;
import com.google.common.io.CharSource;
import com.google.common.io.Closer;
import lombok.SneakyThrows;
import lombok.experimental.UtilityClass;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.io.FileUtils;
import org.cactoos.Text;
import org.cactoos.io.InputOf;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Iterator;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static com.google.common.io.Files.asByteSink;

@UtilityClass
public final class Acts {


    /**
     * Install deps into M2_HOME folder.
     * Generate simple synthetic pom file inside.
     */
    @Slf4j
    static class Deps implements Act {

        @Override
        public Project accept(Project project) {
            Path repo = project.m2Home().resolve("repository");
            project.deps().forEach(dep -> {
                final Path depFolder = dep.relativeTo(repo);
                //noinspection ResultOfMethodCallIgnored
                depFolder.toFile().mkdirs();
                String pref = dep.artifactId() + "-" + dep.version();
                Path jarFile = depFolder.resolve(pref + ".jar");
                copyTo(dep, jarFile);
                String pom =
                        "<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\" " +
                                "xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n" +
                        "<modelVersion>4.0.0</modelVersion>\n" +
                        "<groupId>" + dep.groupId() + "</groupId>\n" +
                        "<artifactId>" + dep.artifactId() + "</artifactId>\n" +
                        "<version>" + dep.version() + "</version>\n" +
                        "<description>Pom file generated by " + this.getClass() + "</description>\n" +
                        "</project>";
                Path pomFile = depFolder.resolve(pref + ".pom");
                log.debug("install: {}", dep);
                writeTo(pomFile, pom);
            });
            log.info("Installed deps: {}", Iterables.size(project.deps()));
            return project;
        }

        @lombok.SneakyThrows
        private static void writeTo(Path pomFile, String pom) {
            java.nio.file.Files.write(pomFile, pom.getBytes(StandardCharsets.UTF_8));
        }

        @lombok.SneakyThrows
        private static void copyTo(Dep dep, Path jarFile) {
            Files.copy(dep.source(), jarFile);
        }
    }


    /**
     * Maven build. Turn off online resolving dependencies.
     */
    static class MvnBuildOffline implements Act {

        @Override
        public Project accept(Project project) {
            project.args()
                    .offline(true)
                    .append("clean", "package");

            new Maven.BazelInvoker().run(project);
            return project;
        }
    }

    /**
     * Run maven build. Allow to fetch dependencies from the web.
     */
    @Slf4j
    static class MvnGoOffline implements Act {
        @Override
        public Project accept(Project project) {
            log.info("eagerly fetch dependencies to go offline...");
            project.args()
                    .offline(false)
                    .append("clean", "package");
            new Maven.BazelInvoker().run(project);
            return project;
        }
    }

    /**
     * Write registered outputs.
     */
    static class Outputs implements Act {
        @Override
        public Project accept(Project project) {
            final Path workDir = project.workDir();
            final Path target = workDir.resolve("target").toAbsolutePath();
            project.outputs().forEach(name -> {
                Path src = target.resolve(name.src());
                Path dest = Paths.get(name.dest());
                try {
                    Files.copy(src, dest);
                } catch (java.nio.file.NoSuchFileException e) {
                    throw new ToolException("No such file: \n" + src + ",\n within: [" + exists(target) + " ...]", e);
                } catch (IOException e) {
                    throw new ToolException(e);
                }

            });
            return project;
        }

        @SneakyThrows
        private String exists(Path target)  {
            return Files.walk(target, 2)
                    .limit(10).map(Path::toString).collect(Collectors.joining("\n"));
        }
    }

    /**
     * Process pom file from template.
     */
    @SuppressWarnings("UnstableApiUsage")
    @Slf4j
    static class POM implements Act {

        @Override
        @lombok.SneakyThrows
        public Project accept(Project project) {
            final Project.PropsView props = project.toView();
            final Path syntheticPom = project.pom();
            final Text renderedTpl = new Template.Mustache(
                    project.pomXmlSrc(),
                    props
            ).eval();

            Files.copy(new InputOf(renderedTpl, StandardCharsets.UTF_8).stream(),syntheticPom);

            if (log.isDebugEnabled()) {
                log.debug("\n{}", renderedTpl.toString()); }
            return project;
        }
    }


    /**
     * Prepare settings xml.
     */
    @Slf4j
    static class SettingsXml implements Act {

        @SneakyThrows
        @Override
        public Project accept(Project project) {
            final Path m2Home = project.m2Home();
            final Path settingsXml = m2Home.resolve("settings.xml").toAbsolutePath();
            final Path repository = m2Home.resolve("repository").toAbsolutePath();
            Files.createDirectories(repository);
            String xml = "<settings xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd\" xmlns=\"http://maven.apache.org/SETTINGS/1.1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n" +
                            "<localRepository>" + repository + "</localRepository>\n" +
                            "</settings>";

            save(settingsXml, xml);
            log.debug("\n{}", xml);
            return project;
        }

        @lombok.SneakyThrows
        private static void save(Path settingsXml, String xml) {
            Files.write(settingsXml, xml.getBytes(StandardCharsets.UTF_8));
        }
    }


    /**
     * Unarchive repository snapshot into M2_HOME.
     */
    @SuppressWarnings("UnstableApiUsage")
    static class DefRepository implements Act {

        @Override
        @lombok.SneakyThrows
        public Project accept(Project project) {
            final Path tar = project.baseImage();
            final Path dest = project.m2Home().resolve("repository");
            final Closer closer = Closer.create();
            final TarArchiveInputStream ais = closer.register(new TarArchiveInputStream(
                    Files.newInputStream(tar, StandardOpenOption.READ)
            ));
            Iterator<TarArchiveEntry> iter = new AbstractIterator<TarArchiveEntry>() {
                @lombok.SneakyThrows
                @Override
                protected TarArchiveEntry computeNext() {
                    final TarArchiveEntry entry = ais.getNextTarEntry();
                    return entry != null ? entry : endOfData();
                }
            };
            try {
                iter.forEachRemaining(entry -> {
                    if (!ais.canReadEntryData(entry)) return;
                    File file = dest.resolve(entry.getName()).toFile();
                    if (entry.isDirectory()) {
                        defineDirectory(file);
                    } else {
                        defineDirectory(file.getParentFile());
                        copy(ais, file);
                    }
                });
            } finally {
                closer.close();
            }

            return project;
        }

        @lombok.SneakyThrows
        private static void copy(TarArchiveInputStream ais, File file) {
            Files.copy(ais, file.toPath());
        }

        @lombok.SneakyThrows
        private static void defineDirectory(File file) {
            if (!file.isDirectory() && !file.mkdirs())
                throw new IOException("failed to create directory " + file);
        }
    }

    /**
     * Create snapshot from the repository.
     */
    @Slf4j
    static class RepositoryArchiver implements Act {

        @SuppressWarnings("UnstableApiUsage")
        @Override
        @lombok.SneakyThrows
        public Project accept(Project project) {
            final Path m2Home = project.m2Home();
            final Path src = m2Home.resolve("repository");
            final String dest = Iterables.getOnlyElement(project.outputs()).src();
            log.debug("Archive: src={} dest={}", src, dest);
            final Closer closer = Closer.create();
            final File destFile = new File(dest);
            final TarArchiveOutputStream aos = closer.register(new TarArchiveOutputStream(
                    asByteSink(destFile).openBufferedStream()
            ));
            aos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);
            final Stream<Path> walk = Files.walk(src);
            closer.register(walk::close);
            try {
                walk.map(Path::toFile).filter(File::isFile).forEach(file -> writeEntry(src, aos, file));
                aos.finish();
            } finally {
                closer.close();
            }
            log.info("Repository archive created: {}", FileUtils.byteCountToDisplaySize(destFile.length()));
            return project;
        }

        @lombok.SneakyThrows
        private void writeEntry(Path repository, TarArchiveOutputStream aos, File file) {
            final Path filePath = file.toPath();
            final ArchiveEntry entry = aos.createArchiveEntry(file,
                    repository.relativize(filePath).toString());
            aos.putArchiveEntry(entry);
            Files.copy(filePath, aos);
            aos.closeArchiveEntry();
        }
    }

    /**
     * Resolve relative path to optional parent project.
     */
    @Slf4j
    static class DefineParentPom implements Act {

        @SneakyThrows
        @Override
        public Project accept(Project project) {
            final Path origParent = project.pomParent();
            if (origParent != null) {
                final Path parentDir = createParentProjectTmpDir(project);
                final Path parentPomFile = parentDir.resolve("pom.xml");
                Files.copy(origParent, parentPomFile);
                return project.toBuilder().pomParent(parentPomFile).build();
            }
            return project;
        }

        @SuppressWarnings("ResultOfMethodCallIgnored")
        private Path createParentProjectTmpDir(Project project) {
            final Path workDir = project.workDir();
            final Path parentDir = workDir.resolve(RandomText.randomFileName("parent"));
            final File file = parentDir.toFile();
            file.mkdirs();
            file.deleteOnExit();
            return parentDir;
        }
    }

    /**
     * Install parent project.
     */
    @Slf4j
    static class InstallParentPOM implements Act {
        @Override
        public Project accept(Project project) {
            final Path origParent = project.pomParent();
            if (origParent != null) {
                final Path parentPomFile = origParent.toAbsolutePath();
                Path parentDir = parentPomFile.getParent().normalize();
                log.info("Install parent project into repository...");
                final Project parentProject = project.toBuilder()
                        .pom(parentPomFile)
                        .workDir(parentDir)
                        .args(new Args().append("install"))
                        .build();

                new Maven.BazelInvoker().run(parentProject);
            }
            return project;
        }
    }
}
