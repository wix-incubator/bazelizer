package com.wix.incubator.mvn;

import com.google.devtools.build.runfiles.Runfiles;
import org.apache.maven.shared.invoker.*;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Duration;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.Properties;

@SuppressWarnings("FieldCanBeLocal")
public class Maven {

    /**
     * Get layout of folder according to maven coordinates.
     *
     * @param groupId group id
     * @param artifactId artifact id
     * @param version version
     * @return a path
     */
    public static Path mvnLayout(String groupId, String artifactId, String version) {
        String[] gidParts = groupId.split("\\.");
        Path thisGroupIdRepo = Paths.get("");
        for (String gidPart : gidParts) {
            thisGroupIdRepo = thisGroupIdRepo.resolve(gidPart);
        }
        return thisGroupIdRepo.resolve(artifactId).resolve(version);
    }

    /**
     * Prepare maven environemtn from archived repository.
     * @param repositoryArchive archived tar
     * @return a maven
     * @throws IOException if any
     */
    public static Maven prepareEnv(Path repositoryArchive) throws IOException {
        final Maven env = prepareEnv();
        IO.untar(repositoryArchive, env.repository);
        return env;
    }

    /**
     * Prepare default maven env.
     * @return a maven
     * @throws IOException if any
     */
    public static Maven prepareEnv() throws IOException {
        Runfiles runfiles = Runfiles.create();
        final File tool = Optional.ofNullable(System.getProperty(BZL_MVN_TOOL_SYS_PROP))
                .map((runfilesPath) -> new File(runfiles.rlocation(runfilesPath)))
                .orElseThrow(() -> new IllegalStateException("no sys prop: " + BZL_MVN_TOOL_SYS_PROP));

        Path m2HomeDir = Files.createTempDirectory("M2_HOME@_" + "128" + "_@");
        Path repository = m2HomeDir.resolve("repository").toAbsolutePath();
        Files.createDirectories(repository);
        Path settingsXmlFile = m2HomeDir.resolve("settings.xml").toAbsolutePath();
        String settingsXml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                "<!-- AUTOGENERATED SETTINGS XML FILE. DO NOT EDIT. -->\n" +
                "<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " +
                "xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n" +
                "    <localRepository>" + repository + "</localRepository>\n" +
                "</settings>";

        Files.write(settingsXmlFile, settingsXml.getBytes());
        DefaultInvoker invoker = new DefaultInvoker();
        invoker.setMavenHome(tool);

        return new Maven(m2HomeDir, repository, settingsXmlFile, invoker);
    }

    @SuppressWarnings("unused")
    private final Path m2HomeDir;
    private final Path settingsXmlFile;
    public final Path repository;
    private final Invoker maven;

    private static final String PREF = "tools.jvm.mvn.";
    private static final String BZL_MVN_TOOL_SYS_PROP = PREF + "MavenBin";

    /**
     * Ctor.
     *
     */
    private Maven(Path m2HomeDir, Path repository, Path settingsXmlFile, Invoker maven) {
        this.m2HomeDir = m2HomeDir;
        this.repository = repository;
        this.settingsXmlFile = settingsXmlFile;
        this.maven = maven;
    }

    /**
     * Execute maven build in offline mode.
     *
     * @param project a project
     * @param args args
     * @param deps external deps
     * @throws IOException if any
     * @throws MavenInvocationException if any
     */
    public void executeOffline(MavenProject project, List<String> args, List<Dep> deps) throws IOException, MavenInvocationException {
        execute(project, args, deps, true);
    }

    /**
     * Execute regular maven build.
     *
     * @param project a project
     * @param args args
     * @throws IOException if any
     * @throws MavenInvocationException if any
     */
    public void execute(MavenProject project, List<String> args) throws IOException, MavenInvocationException {
        execute(project, args, Collections.emptyList(), false);
    }

    private void execute(MavenProject project, List<String> args, List<Dep> deps, boolean offline) throws IOException, MavenInvocationException {
        for (Dep dep : deps) {
            dep.copyTo(repository);
        }

        final File pomFile = project.emit(
                deps
        );
        maven.setWorkingDirectory(pomFile.getParentFile());

        DefaultInvocationRequest request = new DefaultInvocationRequest();
        request.setUserSettingsFile(settingsXmlFile.toFile());
        request.setLocalRepositoryDirectory(repository.toFile());
        request.setJavaHome(new File(System.getProperty("java.home")));
        request.setBatchMode(true);
        request.setShowVersion(true);

        request.setPomFile(pomFile);
        request.setGoals(args);
        request.setProfiles(null);
        request.setOffline(offline);
        Properties properties = request.getProperties();
        if (properties == null) {
            properties = new Properties();
        }
        properties.setProperty("org.slf4j.simpleLogger.defaultLogLevel", "WARN");
        request.setProperties(properties);

        Log.info(project, " >>>");
        Log.info(project, " >>> executing commands " + args);
        long x0 = System.currentTimeMillis();
        final InvocationResult result = maven.execute(request);
        long x1 = System.currentTimeMillis();
        final Duration dur = Duration.ofMillis(x1 - x0);
        Log.info(project, " >>> Done. Elapsed time: " + fmt(dur));

        if (result.getExitCode() != 0) {
            throw new MvnExecException("non zero exit code: " + result.getExitCode());
        }
    }

    private String fmt(Duration dur) {
        return dur.getSeconds() + "." + dur.minusSeconds(dur.getSeconds()).toMillis() + "s";
    }

    public static class MvnExecException extends IOException {
        public MvnExecException(String message) {
            super(message);
        }
    }
}
