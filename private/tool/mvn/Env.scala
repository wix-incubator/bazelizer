package mvn

import java.io.File
import java.nio.file.{Files, Path, Paths, StandardCopyOption}
import com.google.devtools.build.runfiles.Runfiles
import mvn.Env.DepStruct
import org.apache.maven.shared.invoker.{DefaultInvocationRequest, DefaultInvoker, InvocationRequest}

import scala.annotation.meta.{beanGetter, beanSetter}
import scala.util.Try


object Env {

  private val PREF = "tools.jvm.mvn."
  private val BZL_NAME_SYS_PROP = PREF + "BazelLabelName"
  private val BZL_MVN_TOOL_SYS_PROP = PREF + "MavenBin"

  private lazy val MvnRunfiles = Runfiles.create

  private lazy val Tool: File = sys.props.get(BZL_MVN_TOOL_SYS_PROP)
    .map((runfilesPath: String) => new File(MvnRunfiles.rlocation(runfilesPath)))
    .getOrElse(throw new IllegalStateException("no sys prop: " + BZL_MVN_TOOL_SYS_PROP))

  private class DepStruct {
    @beanGetter
    @beanSetter
    var file: Path = _
  }



  case class SettingsXMLProfile(id: String, url: String)

  def settingsXML(localRepository: Path, profiles: Seq[SettingsXMLProfile] = Seq.empty): String = {
    val profilesXml = profiles.map {
      case SettingsXMLProfile(id, url) =>
        val r = s"<repositories><repository><snapshots><enabled>false</enabled></snapshots><id>${id}_repo</id><name>repo $id</name><url>$url</url></repository></repositories>"
        val plg = s"<pluginRepositories><pluginRepository><id>$id repo</id><name>repo $id</name><url>$url</url></pluginRepository></pluginRepositories>"
        s"""<profile>
          |   <id>$id</id>
          |   $r
          |   $plg
          |</profile>
          |""".stripMargin
    }

    s"""<?xml version="1.0" encoding="UTF-8"?>
      |<!-- AUTOGENERATED SETTINGS XML FILE. DO NOT EDIT. -->
      |<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
      |    <localRepository>$localRepository</localRepository>
      |    $profilesXml
      |    <activeProfiles>${ profiles.map(p => "<activeProfile>%s</activeProfile>".format(p.id)).mkString("") }</activeProfiles>
      |</settings>
      |""".stripMargin
  }

}

class Env  {

  private val m2HomeDir: Path = Files.createTempDirectory("M2_HOME@_" + "LABEL245" + "_@")
  val repository: Path = m2HomeDir.resolve("repository").toAbsolutePath
  Files.createDirectories(repository)
  val settingsXmlFile: Path = m2HomeDir.resolve("settings.xml").toAbsolutePath
  Files.write(settingsXmlFile, Env.settingsXML(repository).getBytes)

  //val settingsXmlContent: Input = settingsXml.render(repository)
  //log.info(" [settings.xml]  {}", settingsXmlFile)
  //log.info(" [settings.xml] \n{}", new TextOf(settingsXmlContent).asString)


  /**
   * Eval.
   *
   * @param project project
   * @return res
   */
  def eval(args: Args, project: Project, deps: Seq[Dep] = Seq.empty): Try[Unit] = {
    import collection.JavaConverters._

    def execute(pomFile: File) = Try {
      val invoker = new DefaultInvoker
      invoker.setMavenHome(Env.Tool)
      invoker.setWorkingDirectory(pomFile.getParentFile)

      val request = new DefaultInvocationRequest
      request.setUserSettingsFile(settingsXmlFile.toFile)
      request.setLocalRepositoryDirectory(repository.toFile)
      request.setJavaHome(new File(System.getProperty("java.home")))
      request.setBatchMode(true)
      request.setShowVersion(true)

      request.setPomFile(pomFile)
      request.setGoals(args.cmd.asJava)
      request.setProfiles(null)
      request.setOffline(false)

      val res = invoker.execute(request)
      assert(res.getExitCode == 0)
    }

    for {
      _ <- installDeps(deps)
      pomFile <- project.emitPom(Project.ModelDirective.Deps(deps))
      _ <- execute(pomFile)
    } yield ()

  }

  /**
   * Deps.
   *
   * @param deps deps to add
   */
  private def installDeps(deps: Seq[Dep]) = Try {
    for (dep <- deps) {
      val folder = repository.resolve(mvnLayout(dep))
      //noinspection ResultOfMethodCallIgnored,DuplicatedCode
      folder.toFile.mkdirs
      val fileName = dep.aid + "-" + dep.v
      val jarFile = folder.resolve(fileName + ".jar")
      Files.copy(dep.file.get, jarFile, StandardCopyOption.REPLACE_EXISTING)

      val pom =
        s"""<project>
           |   <modelVersion>4.0.0</modelVersion>
           |   <groupId>${dep.gid}</groupId>
           |   <artifactId>${dep.aid}</artifactId>
           |   <version>${dep.v}</version>
           |   <description>Generated for dep!</description>
           |</project>
           |""".stripMargin

      val pomFile = folder.resolve(fileName + ".pom")
      Files.write(pomFile, pom.getBytes)
    }
  }


  private def mvnLayout(dep: Dep): Path = {
    val gidParts = dep.gid.split("\\.")
    var thisGroupIdRepo = Paths.get("")
    for (gidPart <- gidParts) {
      thisGroupIdRepo = thisGroupIdRepo.resolve(gidPart)
    }
    thisGroupIdRepo.resolve(dep.aid).resolve(dep.v)
  }
}
